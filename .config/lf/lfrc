# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $f >/dev/null 2>&1 ;;
        #audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
        video/*) setsid -f mpv --quiet $f >/dev/null 2>&1 ;;
        #image/*) setsid -f nsxiv -aio $f 2>/dev/null ;;
        image/*) ls-matched-first $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)$" |
            setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
                [ -z "$file" ] && continue
                lf -remote "send select \"$file\""
                lf -remote "send toggle"
            done &
            ;;
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# 自定义配置
cmd delete ${{
    clear                           # 清屏
    tput cup $(($(tput lines)/3))   # 将光标移动到屏幕 1/3 处
    tput bold                       # 设置加粗文本样式

    set -f                          # 禁用通配符展开（防止文件名被误解析）
    printf "%s\n\t" "$fx"           # 打印要删除的文件名
    printf "delete?[y/N]: "         # 提示用户确认

    read -r ans                     # 读取用户输入
    case "$ans" in
        [Yy]) rm -rf -- "$fx" ;;    # 如果用户输入 'y' 或 'Y'，则删除文件
        *) echo "Canceled." ;;      # 取消删除
    esac
}}

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"  # 生成临时文件，存储旧文件名
    tmpfile_new="$(mktemp)"  # 生成临时文件，存储新文件名

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)
    # 如果 `fs` 变量（选中的文件列表）非空，则提取文件名，否则列出当前目录所有文件

    echo "$fs" > "$tmpfile_old"  # 旧文件列表写入临时文件
    echo "$fs" > "$tmpfile_new"  # 复制一份作为新文件列表
    $EDITOR "$tmpfile_new"  # 让用户编辑 `tmpfile_new`

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || {
        rm -f "$tmpfile_old" "$tmpfile_new"
        exit 1
    }
    # 确保行数匹配，否则退出（防止用户意外删除或添加行）

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done
    # 读取原始和修改后的文件名，若不同且目标文件不存在，则执行 `mv`

    rm -f "$tmpfile_old" "$tmpfile_new"  # 清理临时文件
    lf -remote "send $id unselect"  # 取消 `lf` 选中的文件
}}

set icons
set period 1
set previewer ~/.config/lf/previewer.sh
set cleaner ~/.config/lf/cleaner.sh

# 快捷键
map <c-r> reload
map . set hidden!
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map H cd ~
map U $printf "%s" "$fx" | xclip -selection clipboard
map u $printf "%s" "$fx" | sed 's/.*\///' | xclip -selection clipboard

map D delete
map B bulkrename
