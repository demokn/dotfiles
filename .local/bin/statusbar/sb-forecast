#!/bin/sh

# Displays todays precipication chance (â˜”) and daily low (ðŸ¥¶) and high (ðŸŒž).
# Usually intended for the statusbar.

# If we have internet, get a weather report from wttr.in and store it locally.
# You could set up a shell alias to view the full file in a pager in the
# terminal if desired. This function will only be run once a day when needed.
weatherreport="${XDG_CACHE_HOME:-$HOME/.cache}/weatherreport"
getforecast() { curl -sf "wttr.in/$LOCATION" >"$weatherreport" || exit 1; }

# Some very particular and terse stream manipulation. We get the maximum
# precipitation chance and the daily high and low from the downloaded file and
# display them with coresponding emojis.
showweather() {
    printf "%s" "$(sed '16q;d' "$weatherreport" |
        grep -wo "[0-9]*%" | sort -rn | sed "s/^/â˜”/g;1q" | tr -d '\n')"
    sed '13q;d' "$weatherreport" | grep -o "m\\([-+]\\)*[0-9]\\+" | sed 's/+//g' | sort -n -t 'm' -k 2n | sed -e 1b -e '$!d' | tr '\n|m' ' ' | awk '{print " ðŸ¥¶" $1 "Â°","ðŸŒž" $2 "Â°"}'
}

case $BUTTON in
    1) setsid -f "$TERMINAL" -e less -Srf "$weatherreport" ;;
    2) getforecast && showweather ;;
    3) notify-send "ðŸŒˆ Weather module" "\- Left click for full forecast.
- Middle click to update forecast.
â˜”: Chance of rain/snow
ðŸ¥¶: Daily low
ðŸŒž: Daily high" ;;
    6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Delete invliad(empty) weather report cache file when the internet is up.
# To force download a new weather report.
[ "$(stat -c %s "$weatherreport" 2>/dev/null)" = "0" ] &&
    { [ "$(cat /sys/class/net/w*/operstate 2>/dev/null)" = "up" ] ||
        [ "$(cat /sys/class/net/e*/operstate 2>/dev/null)" = "up" ]; } &&
    rm -rf "$weatherreport"

# The test if our forcecast is updated to the day. If it isn't download a new
# weather report from wttr.in with the above function.
[ "$(stat -c %y "$weatherreport" 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ] ||
    getforecast

showweather
